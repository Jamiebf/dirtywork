  defs.h 
  @@ -116,6 +116,8 @@ void            userinit(void);
  int             wait(void);
  void            wakeup(void*);
  void            yield(void);
+ void            sharedinit(void);
+ struct shared * sharedalloc(void);
  
  // swtch.S
  void            swtch(struct context**, struct context*);
  
   main.c 
    @@ -28,6 +28,7 @@ main(void)
    consoleinit();   // I/O devices & their interrupts
    uartinit();      // serial port
    pinit();         // process table
+   sharedinit();    // shared memory records
    tvinit();        // trap vectors
    binit();         // buffer cache
    fileinit();      // file table
  
  proc.c 
    @@ -12,6 +12,11 @@ struct {
      struct proc proc[NPROC];
    } ptable;
    
+   struct {
+   struct spinlock lock;
+   struct shared shared[NSHARED];
+   } sharedtable;
+   
    static struct proc *initproc;
    
    int nextpid = 1;
    @@ -122,6 +127,49 @@ growproc(int n)
      return 0;
  }
  
+ void
+ sharedinit()
+ {
+   initlock(&sharedtable.lock, "shared");
+ }
+ 
+ struct shared *
+ sharedalloc()
+ {
+   int i;
+   void *mem;
+   struct shared *sh;
+ 
+ acquire(&sharedtable.lock);
+ for (i = 0; i < NSHARED; i++) {
+   if (sharedtable.shared[i].refcount == 0) {
+     // found a free one
+     break;
+   }
+ }
+ 
+   // no free shared records left
+   if (i == NSHARED) {
+     release(&sharedtable.lock);
+     return 0;
+   }
+ 
+   mem = kalloc();
+   if (!mem) {
+     release(&sharedtable.lock);
+     return 0;
+   }
+ 
+   sh = &sharedtable.shared[i];
+   sh->refcount = 1;
+   sh->page = mem;
+   release(&sharedtable.lock);
+ 
+   return sh;
+ }
+ 
+ extern void mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+ 
  // Create a new process copying p as the parent.
  // Sets up stack to return as if from system call.
  // Caller must set state of returned proc to RUNNABLE.
  @@ -153,6 +201,15 @@ fork(void)
      if(proc->ofile[i])
        np->ofile[i] = filedup(proc->ofile[i]);
    np->cwd = idup(proc->cwd);
+ 
+   // shared mem
+   if (proc->shared) {
+     acquire(&sharedtable.lock);
+     proc->shared->refcount++;
+     mappages(np->pgdir, (char *)SHARED_V, PGSIZE, v2p(proc->shared->page), PTE_W|PTE_U);
+     np->shared = proc->shared;
+     release(&sharedtable.lock);
+   }
  
    pid = np->pid;
    np->state = RUNNABLE;
  @@ -230,6 +287,15 @@ wait(void)
          p->parent = 0;
          p->name[0] = 0;
          p->killed = 0;
+         if (p->shared) {
+           acquire(&sharedtable.lock);
+           p->shared->refcount--;
+           if (p->shared->refcount == 0) {
+             kfree(p->shared->page);
+         }
+         release(&sharedtable.lock);
+         p->shared = 0;
+       }
        release(&ptable.lock);
        return pid;
      }
   13  proc.h 
  @@ -51,6 +51,17 @@ struct context {
  
  enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
  
+ // The virtual address where shared memory appears, if requested
+ #define SHARED_V 0x70000000
+ 
+ // the maximum number of shared pages in the system
+ #define NSHARED 10
+ 
+ struct shared {
+   int refcount;
+   void *page; 
+ };
+ 
  // Per-process state
  struct proc {
    uint sz;                     // Size of process memory (bytes)
  @@ -65,6 +76,7 @@ struct proc {
    int killed;                  // If non-zero, have been killed
    struct file *ofile[NOFILE];  // Open files
    struct inode *cwd;           // Current directory
+   struct shared *shared;       // Shared memory record (0 -> none)
    char name[16];               // Process name (debugging)
  };
  
  @@ -73,3 +85,4 @@ struct proc {
  //   original data and bss
  //   fixed-size stack
  //   expandable heap
+ //   (optionally) fixed-sized shared mem segment, 1 page @ 0x7000000
   2  syscall.c 
  @@ -98,6 +98,7 @@ extern int sys_unlink(void);
  extern int sys_wait(void);
  extern int sys_write(void);
  extern int sys_uptime(void);
+ extern int sys_shared(void);
  
  static int (*syscalls[])(void) = {
  [SYS_fork]    sys_fork,
  @@ -121,6 +122,7 @@ static int (*syscalls[])(void) = {
  [SYS_link]    sys_link,
  [SYS_mkdir]   sys_mkdir,
  [SYS_close]   sys_close,
+ [SYS_shared]  sys_shared,
  };
  
  void
   2  syscall.h 
  @@ -21,3 +21,5 @@
  #define SYS_link   19
  #define SYS_mkdir  20
  #define SYS_close  21
+ 
+ #define SYS_shared 22
   24  sysproc.c 
  @@ -88,3 +88,27 @@ sys_uptime(void)
    release(&tickslock);
    return xticks;
  }
+ 
+ extern void mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+ 
+ // arrange for this process to have a shared memory page
+ // that will be shared with all children
+ int
+ sys_shared(void)
+ {
+   struct shared *sh;
+ 
+   // if there's already a shared page, return now
+   if (proc->shared) {
+     return SHARED_V;
+   }
+ 
+   sh = sharedalloc();
+   if (sh) {
+     proc->shared = sh;
+     mappages(proc->pgdir, (char *)SHARED_V, PGSIZE, v2p(sh->page), PTE_W|PTE_U);
+     return SHARED_V;
+   } else {
+     return 0;
+   }
+ }
   1  user.h 
  @@ -22,6 +22,7 @@ int getpid(void);
  char* sbrk(int);
  int sleep(int);
  int uptime(void);
+ int shared(void);
  
  // ulib.c
  int stat(char*, struct stat*);
   38  usertests.c 
  @@ -1597,6 +1597,43 @@ fsfull()
    printf(1, "fsfull test finished\n");
  }
  
+ void
+ sharedtest()
+ {
+   int i;
+   char *sh;
+ 
+   sh = (char *)shared();
+   if (!sh) {
+     printf(2, "shared: fail\n");
+     exit();
+ }
+ 
+   if (fork() == 0) {
+     printf(1, "pid child: %d\n", getpid());
+     strcpy(sh, "hello world");
+     exit();
+   } else {
+     int pid;
+     printf(1, "pid parent: %d\n", getpid());
+     while (i < 10000) {
+       if (strcmp(sh, "hello world") == 0) {
+         printf(2, "shared: ok after %d checks\n", i);
+         break;
+       }
+       i++;
+       // yield and let the other guy run
+       sleep(0);
+     }
+     if (i == 10000) {
+       printf(2, "shared: not ok after %d checks\n", i);
+     }
+ 
+     pid = wait();
+     printf(1, "parent reaped pid %d\n", pid);
+   }
+ }
+ 
  unsigned long randstate = 1;
  unsigned int
  rand()
  @@ -1650,6 +1687,7 @@ main(int argc, char *argv[])
    bigdir(); // slow
  
    exectest();
+   sharedtest();
  
    exit();
  }
   1  usys.S 
  @@ -29,3 +29,4 @@ SYSCALL(getpid)
  SYSCALL(sbrk)
  SYSCALL(sleep)
  SYSCALL(uptime)
+ SYSCALL(shared)
   6  vm.c 
  @@ -67,7 +67,7 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
  // Create PTEs for virtual addresses starting at va that refer to
  // physical addresses starting at pa. va and size might not
  // be page-aligned.
- static int
+ int
  mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
  {
    char *a, *last;
  @@ -223,7 +223,7 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
    char *mem;
    uint a;
  
 -  if(newsz >= KERNBASE)
 +  if(newsz >= SHARED_V)
      return 0;
    if(newsz < oldsz)
      return oldsz;
  @@ -281,7 +281,7 @@ freevm(pde_t *pgdir)
  
    if(pgdir == 0)
      panic("freevm: no pgdir");
 -  deallocuvm(pgdir, KERNBASE, 0);
 +  deallocuvm(pgdir, SHARED_V, 0);
    for(i = 0; i < NPDENTRIES; i++){
      if(pgdir[i] & PTE_P){
        char * v = p2v(PTE_ADDR(pgdir[i]));

